Use Images from here : https://www.pexels.com/
Use react.next js component existing one from here : https://www.devui.io/
Read about react more here : https://github.com/acdlite/react-fiber-architecture

for creating react app , we have many ways :
1 > npx create-react-app your_app_name = this is old and heavy way to create react application, no preferred nowdays
2 > use other libraries like vite ,parsel etc
npm create vite@latest or npm create vite(vite with some specified version name)

> For all react app, you need to make sure that component's name should have all or first letter capitalized
> in vite with react, you need to use jsx when you try to use components but in create-react-app -> react app, does not need that
> means required naming file's extension correctly.
> react via vite is Framework whereas react via create-react-app is library
> <></> this empty tag is called fragment in react.

3 > That customReact folder is an attempt to create custom React itself 
> React tries to make a tree of all our element that we use in react
> look into this customReact folder ,it shows real react js working , go look in to it

3.1 > we can use React.createElement() for doing similar things as we were doing in custom react
3.2 > React.createElement() is used in React by default , for all defined elements
3.3 > React.createElement() is injected by Babel behind the scene

4 > In react , we use '{}' inside our tags which we define in jsx file
like 
function App() {
  const username = "Himanshu Gupta !"

  return (
    <>
    <h1>Chai aur React with vite | {username}</h1>
    < Chai />
    </>
  )
}

here , '{}' this is called "expression" in react js
and username which is used there is called "evaluation expression"
5 > Hooks in react are used to update values of variable on UI, since even if we update them UI does not show then thats why we use Hooks in react
some react Hooks are : useState(), useEffect(), useContext() and many more

#######################################################################################
# Important for Interviews #
############## Virtual DOM , Fibre and Reconciliation ###############################
#######################################################################################
> ReactDOM method createRoot is a method which creates a DOM like (similar to what browser have) structure in react 
> But this createRoot method of reactDOM updates/reloads only those UI which have some updates only
> whereas, DOM of browser updates/reloads/repaints whole page, it does not matter how small or big updates taken place
> the working of this ReactDOM method creatRoot does is what we call as VirtualDOM
> VirtualDOM keep tracks of whole DOM in tree like structure, changes/replace those values in tree whose values get changed/updated.

# for studying more on react fibre , go to this article https://github.com/acdlite/react-fiber-architecture or more

> The Algorithm that works in react core is called React Fiber.
> previous Algorithm that was working for VirtualDOM had need betterment/improvement like when our UI in react depends on API or any
network related UI, at that if there are multiple updates for it at lag of some seconds or they came at almost instantly, then
react UI work on implementing all of them one by one even though they works for samething, and if we waited a little we could have
gotten last updates and not needed to update each of them

and more more similar issues

so, a new react core's algorithm was implemented on React called as React Fiber.

> The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. 
> Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.

> Other key features include the ability to pause, abort, or reuse work as new updates come in; 
> the ability to assign priority to different types of updates; and new concurrency primitives.

> 'Hyderation' is the process of sending JS code to browser for a page, when other structure like HTML and CSS are already there
> You may have noticed that at the start when react initialized, some button that clicked on does not seems to be working but all of
sudden they started working, yes that was time when JS was loading there  and this process in react is called "HYDERATION".

Reconciliation
> The algorithm React uses to diff one tree with another to determine which parts need to be changed.
> for difference here means difference between DOM (one tree) in browser and VirtualDOM (another tree) of react 
> Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." ###
update
A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.


> Although Fiber is a ground-up rewrite of the reconciler, 
> the high-level algorithm described in the React docs will be largely the same. 
> The key points are:

> - Different component types are assumed to generate substantially different trees. 
> - React will not attempt to diff them, but rather replace the old tree completely.
> - Diffing of lists is performed using keys. Keys should be "stable, predictable, and unique."

The key points are:

> In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, 
causing frames to drop and degrading the user experience.
> Different types of updates have different priorities — an animation update needs to complete more quickly than, 
say, an update from a data store.
> A push-based approach requires the app (you, the programmer) to decide how to schedule work. A pull-based approach allows 
the framework (React) to be smart and make those decisions for you.

We've established that a primary goal of Fiber is to enable React to take advantage of scheduling. 
Specifically, we need to be able to

> pause work and come back to it later.
> assign priority to different types of work.
> reuse previously completed work.
>  abort work if it's no longer needed.


After that we just need to learn props in React.
// write about react props or properties here

THATS ALL for React FOUNDATION/LEARNING

others like routing etc are extra libraries used in react.

useCallBack(func, [dependencies])  : 
useCallBack is a react Hook that lets you cache a function definition
between re-renders
it momized/cache dependencies as much as pissible and optimize code
read more here : https://react.dev/reference/react/useCallback

useEffect(func, [dependencies]) : 
if any of given dependencies changes then trigger this function in use Effect
dependencies can be variable, or any function.
read here : https://react.dev/reference/react/useEffect

useRef : 
it is used when we need to take reference .
useRef is a React Hook that lets you reference a value that’s not needed for rendering.
const ref = useRef(initialValue)

read more here : https://react.dev/reference/react/useRef

Remember key (inside tag) in loops in react

useId : 
useId is a react hook for generating unique IDs that can be passed to accessibility attributes.
DO not use/call useId to generate keys in a lists


3rd party library used in react
React-router learn here : https://reactrouter.com/en/main
Router in react is used for navigating from one page/tab/component to another without refresing page. (find more better )

React Router is a collection of navigational components that compose declaratively with your application. 
It makes it easy to create UIs with complex navigation patterns without getting lost in the details.
React Router is built on top of the powerful routing capabilities of React Native, and 
provides a number of features that make it easy to create rich, dynamic user interfaces.
React Router is a powerful tool that can be used to create complex, dynamic user interfaces. 
It is easy to use and provides a number of features that make it a great choice for React applications.

Here are some of the features of React Router:
> Declarative routing:
React Router allows you to define your routes declaratively, using a simple syntax 
that makes it easy to understand how your application will navigate.

> Nested routes:
React Router supports nested routes, which allow you to create complex navigation hierarchies.

> Dynamic routes:
React Router supports dynamic routes, which allow you to match routes based on the current URL.

> Route parameters:
React Router allows you to pass parameters to routes, which can be used to render different content based on the current URL.

> Navigation guards:
React Router allows you to define navigation guards, which can be used to prevent users from navigating to certain routes.

> Transition hooks:
React Router allows you to define transition hooks, which can be used to run code before and after a navigation transition.


Context API in React :
React Context API is a built-in feature of React that allows you to share state across your app. 
It's a lightweight alternative to external state management libraries like Redux

The Context API is useful for passing data from a parent component to its descendants without prop drilling. 
Prop drilling is the process of passing data through multiple layers of nested components, which can make 
components less readable and difficult to maintain.

The Context API is ideal for global or application-wide state, deep component nesting, and cross-component communication. 
Some use cases for the Context API include:
- Managing application theme
- Managing user authentication
- Managing localization
- Managing routing
- Storing and accessing user profiles
- Keeping a shared state in sync 

To use the Context API, you can:
> Create a context object
> Wrap components with a Provider
> Consume the context in other components

read more and understand via going to react official doc or react.dev website


Redux ToolKit
learn from here : https://redux-toolkit.js.org/

Firstly do all required installing for redux tool via above link

create redux store in react : 
1> import configure store from redux toolkit
like below : 
import { configureStore } from "@reduxjs/toolkit";
export const store = configureStore({})

2> create reducer/slices
